@using Microsoft.AspNetCore.Components.Web
@using ScratchCycles.Models
@using ScratchCycles.Services
@inject JsonFileEndpointsService Service


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div class="card-columns">
    @foreach (var endpoint in Service.GetEndpoints())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@endpoint.Image')"></div>
            <div class="card-body">
                <h5 class="card-title">@endpoint.FirstName</h5>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <button @onclick="e => SelectProduct(endpoint.ID)"
                             data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More Info
                    </button>
                </small>
            </div>
        </div>
    }
</div>
@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.LastName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.IPAddress</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (var i = 0; i < 5; i++)
                    {
                        var currentStar = i;
                        if (i < currentRating)
                        {
                            <span class="fa-star fa checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa-star fa" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code
{
    Endpoint selectedProduct;
    int selectedProductId;

    void SelectProduct(int id)
    {
        selectedProductId = id;
        selectedProduct = Service.GetEndpoints().First(e => e.ID == id);
        GetCurrentRating();
    }

    double currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if(selectedProduct?.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Length;
            voteLabel = voteCount > 1 ? "votes" : "vote";
            currentRating = selectedProduct.Ratings.Average();
        }
        System.Console.WriteLine($"Current Rating for {selectedProductId}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProductId}: {currentRating}");
        Service.AddRating(selectedProductId, rating);
    }
}